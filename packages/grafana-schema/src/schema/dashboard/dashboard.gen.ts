// This file is autogenerated. DO NOT EDIT.
//
// Run "make gen-cue" from repository root to regenerate.
//
// Derived from the Thema lineage at pkg/coremodel/dashboard

export interface AnnotationQuery {
  builtIn: number;
  datasource: {
    type?: string;
    uid?: string;
  };
  enable: boolean;
  hide?: boolean;
  iconColor?: string;
  name?: string;
  rawQuery?: string;
  showIn: number;
  target?: {};
  type: string;
}

export const defaultAnnotationQuery: Partial<AnnotationQuery> = {
  builtIn: 0,
  enable: true,
  hide: false,
  showIn: 0,
  type: 'dashboard',
};

export interface VariableModel {
  label?: string;
  name: string;
  type: VariableType;
}

export interface DashboardLink {
  asDropdown: boolean;
  icon?: string;
  includeVars: boolean;
  keepTime: boolean;
  tags: string[];
  targetBlank: boolean;
  title: string;
  tooltip?: string;
  type: DashboardLinkType;
  url?: string;
}

export const defaultDashboardLink: Partial<DashboardLink> = {
  asDropdown: false,
  includeVars: false,
  keepTime: false,
  tags: [],
  targetBlank: false,
};

export type DashboardLinkType = ('link' | 'dashboards');

export type VariableType = ('query' | 'adhoc' | 'constant' | 'datasource' | 'interval' | 'textbox' | 'custom' | 'system');

export enum FieldColorModeId {
  ContinuousGrYlRd = 'continuous-GrYlRd',
  Fixed = 'fixed',
  PaletteClassic = 'palette-classic',
  PaletteSaturated = 'palette-saturated',
  Thresholds = 'thresholds',
}

export type FieldColorSeriesByMode = ('min' | 'max' | 'last');

export interface FieldColor {
  fixedColor?: string;
  mode: (FieldColorModeId | string);
  seriesBy?: FieldColorSeriesByMode;
}

export interface GridPos {
  h: number;
  static?: boolean;
  w: number;
  x: number;
  y: number;
}

export const defaultGridPos: Partial<GridPos> = {
  h: 9,
  w: 12,
  x: 0,
  y: 0,
};

export interface Threshold {
  color: string;
  state?: string;
  value?: number;
}

export enum ThresholdsMode {
  Absolute = 'absolute',
  Percentage = 'percentage',
}

export interface ThresholdsConfig {
  mode: ThresholdsMode;
  steps: Threshold[];
}

export const defaultThresholdsConfig: Partial<ThresholdsConfig> = {
  steps: [],
};

export type ValueMapping = (ValueMap | RangeMap | RegexMap | SpecialValueMap);

export enum MappingType {
  RangeToText = 'range',
  RegexToText = 'regex',
  SpecialValue = 'special',
  ValueToText = 'value',
}

export interface ValueMap {
  options: {};
  type: 'value';
}

export interface RangeMap {
  options: {
    from: number;
    to: number;
    result: ValueMappingResult;
  };
  type: 'range';
}

export interface RegexMap {
  options: {
    pattern: string;
    result: ValueMappingResult;
  };
  type: 'regex';
}

export interface SpecialValueMap {
  options: {
    pattern: string;
    result: ValueMappingResult;
  };
  type: 'special';
}

export enum SpecialValueMatch {
  Empty = 'empty',
  False = 'false',
  NaN = 'nan',
  Null = 'null',
  NullAndNan = 'null+nan',
  True = 'true',
}

export interface ValueMappingResult {
  color?: string;
  icon?: string;
  index?: number;
  text?: string;
}

export interface Transformation {
  id: string;
  options: {};
}

export enum DashboardCursorSync {
  Crosshair = 1,
  Off = 0,
  Tooltip = 2,
}

export const defaultDashboardCursorSync: DashboardCursorSync = DashboardCursorSync.Off;

export interface Panel {
  datasource?: {
    type?: string;
    uid?: string;
  };
  description?: string;
  fieldConfig: FieldConfigSource;
  gridPos?: GridPos;
  id?: number;
  interval?: string;
  links?: DashboardLink[];
  maxDataPoints?: number;
  options: {};
  pluginVersion?: string;
  repeat?: string;
  repeatDirection: ('h' | 'v');
  tags?: string[];
  targets?: {}[];
  thresholds?: any[];
  timeFrom?: string;
  timeRegions?: any[];
  timeShift?: string;
  title?: string;
  transformations: Transformation[];
  transparent: boolean;
  type: string;
}

export const defaultPanel: Partial<Panel> = {
  links: [],
  repeatDirection: 'h',
  tags: [],
  targets: [],
  thresholds: [],
  timeRegions: [],
  transformations: [],
  transparent: false,
};

export interface FieldConfigSource {
  defaults: FieldConfig;
  overrides: {
    matcher: MatcherConfig;
    properties: {
      id: string;
      value?: any;
    }[];
  }[];
}

export const defaultFieldConfigSource: Partial<FieldConfigSource> = {
  overrides: [],
};

export interface MatcherConfig {
  id: string;
  options?: any;
}

export const defaultMatcherConfig: Partial<MatcherConfig> = {
  id: '',
};

export interface FieldConfig {
  color?: FieldColor;
  custom?: {};
  decimals?: number;
  description?: string;
  displayName?: string;
  displayNameFromDS?: string;
  filterable?: boolean;
  links?: any[];
  mappings?: ValueMapping[];
  max?: number;
  min?: number;
  noValue?: string;
  path?: string;
  thresholds?: ThresholdsConfig;
  unit?: string;
  writeable?: boolean;
}

export const defaultFieldConfig: Partial<FieldConfig> = {
  links: [],
  mappings: [],
};

export interface RowPanel {
  collapsed: boolean;
  datasource?: {
    type?: string;
    uid?: string;
  };
  gridPos?: GridPos;
  id: number;
  panels: (Panel | {
      type: 'graph';
    } | {
      type: 'heatmap';
    })[];
  repeat?: string;
  title?: string;
  type: 'row';
}

export const defaultRowPanel: Partial<RowPanel> = {
  collapsed: false,
  panels: [],
};

export interface Dashboard {
  annotations?: {
    list: AnnotationQuery[];
  };
  description?: string;
  editable: boolean;
  fiscalYearStartMonth?: number;
  gnetId?: string;
  graphTooltip: DashboardCursorSync;
  id?: number;
  links?: DashboardLink[];
  liveNow?: boolean;
  panels?: (Panel | RowPanel | {
      type: 'graph';
    } | {
      type: 'heatmap';
    })[];
  refresh?: (string | false);
  schemaVersion: number;
  style: ('light' | 'dark');
  tags?: string[];
  templating?: {
    list: VariableModel[];
  };
  time?: {
    from: string;
    to: string;
  };
  timepicker?: {
    collapse: boolean;
    enable: boolean;
    hidden: boolean;
    refresh_intervals: string[];
    time_options: string[];
  };
  timezone?: ('browser' | 'utc' | '');
  title?: string;
  uid?: string;
  version?: number;
  weekStart?: string;
}

export const defaultDashboard: Partial<Dashboard> = {
  editable: true,
  graphTooltip: DashboardCursorSync.Off,
  links: [],
  panels: [],
  schemaVersion: 36,
  style: 'dark',
  tags: [],
  timezone: 'browser',
};
